--
-- PostgreSQL database dump
--

-- Dumped from database version 15.4 (Ubuntu 15.4-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: blog_posts; Type: TABLE DATA; Schema: public; Owner: areibogihitbae
--

COPY "public"."blog_posts" ("id", "title", "subtitle", "date", "body", "img_url", "user_id") FROM stdin;
1	Hello World	An Introduction	August 03, 2023	<p>Hello and welcome to my blog! This is something I&#39;ve been eagerly waiting to announce, and I&#39;m thrilled to do so today!</p>\r\n\r\n<p>I&#39;ve wanted to start a blog for quite some time, and serendipitously, I was required to do so during the Python Bootcamp I attended. It&#39;s been a fun exploration, which I will share in detail in a later blog post.</p>\r\n\r\n<p>The blog serves as a &quot;build in public&quot; platform, where I showcase my projects and studies in the fields of Programming, Software Engineering, Machine Learning, and Electronics. Hopefully, I can be of help, and if not, maybe I can receive some assistance.</p>\r\n\r\n<p>I&#39;m looking forward to this experience. Stay tuned!</p>\r\n\r\n<p>&nbsp;</p>\r\n	https://i.imgur.com/eCTg0m6.jpg	\N
2	The Software Lifecycle 	What is it? Why do we need to understand it?	August 03, 2023	<p>A building is able to be built one brick at a time, but if you want to build a top floor, you might take care to reinforce the structure of the bottom. If you want to install electric wiring, you may want to do so before you add the finishing layers; although you could technically just string wires all over the place like some kind of mad scientist. The point being, if you want to build a house, then you should plan to build a house. When you plan to build a shed and decide that it must become a house, your once-valuable shed now becomes expensive/time-invested junk that will need a complete reconstruction. You wouldn&rsquo;t run a business this way, at least not for long.</p>\r\n\r\n<p>If you&rsquo;re going to build some software, you might examine the metaphor for insights; do I want to scale in the future, do I want to add features, do I want to foresee any possible security hazards. The answer might be to lay out a plan that avoids as much of this technical debt as possible.</p>\r\n\r\n<p>To meet these ends, the field of Software Engineering employs a process called the <strong>Software Lifecycle</strong>.&nbsp;</p>\r\n\r\n<ul>\r\n\t<li><strong>Requirements</strong> - What is the function of the software in question? Requirements assessment is dedicated to figuring out all of the tasks that your software will need to accomplish. It is important to determine the scope of your project and what constitutes a finished product. In theory, this phase does exactly that.</li>\r\n\t<li><strong>Design</strong> - What specific algorithms, languages, and other architectural elements will be employed? The time and money that can be saved by creating a thorough plan of attack is significant. The questions of scalability, costs, and the necessary level of efficiency may be determined in this phase and managed more effectively.&nbsp;</li>\r\n\t<li><strong>Implementation</strong> - The build process. It&rsquo;s the time for all of that planning to come to fruition one way or the other. At this point the parts are being built and brought together. It&rsquo;s going to be a lot of building and debugging until you have a functional product.&nbsp;</li>\r\n\t<li><strong>Verification</strong> - Testing the implemented solution for the use case. How well does the final end product meet the predetermined requirements? You&rsquo;ll finally be testing the integrity of your idea against the task at hand. After verification, you officially have a finished product that is ready to move on from the build to the next phase of life.</li>\r\n\t<li><strong>Maintenance</strong> - User complaints/bug fixes, typically at predetermined intervals, although the needs will vary on a per project basis. This phase is exactly what it sounds like. You&rsquo;ll be taking care of fine-tuning and bug-fixing. You may eventually decide that you could add more functionality, at which point you begin the process again.&nbsp;</li>\r\n</ul>\r\n\r\n<p>Overall, there are several ways to approach the challenge of engineering and implementing a software solution. It is a good idea to familiarize yourself with these core parts of the process and the way they build upon one another.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n	https://imgur.com/cqP4efE.jpg	\N
3	43 Most Common HTML Tags	Know what these do, and you'll be HTML-proficient	August 10, 2023	<p>As a Web Developer, you&rsquo;ll need to familiarize yourself with HTML tags. It&rsquo;s a simple language that doesn&rsquo;t involve a lot of process, but it doesn&rsquo;t hurt to know which options are at your disposal. Here are some of the most common HTML tags you&rsquo;ll use:</p>\r\n\r\n<ol>\r\n\t<li><strong>&lt;!DOCTYPE&gt;</strong>: Specifies the document type and version of HTML being used.</li>\r\n\t<li><strong>&lt;html&gt;</strong>: The root element that wraps all content on a web page.</li>\r\n\t<li><strong>&lt;head&gt;</strong>: Contains metadata about the document, such as the title and links to stylesheets.</li>\r\n\t<li><strong>&lt;meta&gt;</strong>: Provides metadata about the HTML document, such as character encoding and viewport settings.</li>\r\n\t<li><strong>&lt;title&gt;</strong>: Sets the title of the web page displayed in the browser&#39;s title bar or tab.</li>\r\n\t<li><strong>&lt;link&gt;</strong>: Specifies external resources, such as stylesheets, to be included in the document.</li>\r\n\t<li><strong>&lt;script&gt;</strong>: Defines client-side JavaScript or links to external script files.</li>\r\n\t<li><strong>&lt;style&gt;</strong>: Contains CSS code for styling the content within the HTML document.</li>\r\n\t<li><strong>&lt;body&gt;</strong>: Contains the visible content of the web page.</li>\r\n\t<li><strong>&lt;header&gt;</strong>: Represents the header section of a document or a section within the document.</li>\r\n\t<li><strong>&lt;nav&gt;</strong>: Defines a navigation menu typically containing links to different sections.</li>\r\n\t<li><strong>&lt;main&gt;</strong>:<strong> </strong>Represents the main content area of the document.</li>\r\n\t<li><strong>&lt;article&gt;</strong>: Represents a self-contained composition, like a blog post or news article.</li>\r\n\t<li><strong>&lt;section&gt;</strong>: Defines a thematic grouping within a document, often with its heading.</li>\r\n\t<li><strong>&lt;aside&gt;</strong>: Represents content that is tangentially related to the content around it, like a sidebar.</li>\r\n\t<li><strong>&lt;footer&gt;</strong>: Represents the footer section of a document or a section within the document.</li>\r\n\t<li><strong>&lt;p&gt;</strong>: Defines a paragraph of text.</li>\r\n\t<li><strong>&lt;a&gt;</strong>: Creates a hyperlink to another web page or resource.</li>\r\n\t<li><strong>&lt;img&gt;</strong>: Embeds an image in the document.</li>\r\n\t<li><strong>&lt;ul&gt;</strong>: Creates an unordered (bulleted) list.</li>\r\n\t<li><strong>&lt;ol&gt;</strong>: Creates an ordered (numbered) list.</li>\r\n\t<li><strong>&lt;li&gt;</strong>: Defines a list item within a &lt;ul&gt; or &lt;ol&gt; list.</li>\r\n\t<li><strong>&lt;div&gt;</strong>: Represents a generic container for grouping and styling elements.</li>\r\n\t<li><strong>&lt;span&gt;</strong>: Represents an inline container for styling a portion of text.</li>\r\n\t<li><strong>&lt;table&gt;</strong>: Defines a table for organizing tabular data.</li>\r\n\t<li><strong>&lt;tr&gt;</strong>: Defines a table row within a &lt;table&gt;.</li>\r\n\t<li><strong>&lt;td&gt;</strong>: Defines a table cell within a &lt;tr&gt;.</li>\r\n\t<li><strong>&lt;th&gt;</strong>: Defines a table header cell, typically within the<strong> &lt;thead&gt;.</strong></li>\r\n\t<li><strong>&lt;form&gt;</strong>: Creates a form for user input.</li>\r\n\t<li><strong>&lt;input&gt;</strong>: Defines an input field within a form.</li>\r\n\t<li><strong>&lt;textarea&gt;</strong>: Creates a multiline text input field.</li>\r\n\t<li><strong>&lt;button&gt;</strong>: Creates a clickable button.</li>\r\n\t<li><strong>&lt;label&gt;</strong>: Provides a label for an input element.</li>\r\n\t<li><strong>&lt;select&gt;</strong>: Creates a dropdown selection list.</li>\r\n\t<li><strong>&lt;option&gt;</strong>: Defines an option within a &lt;select&gt; element.</li>\r\n\t<li><strong>&lt;iframe&gt;</strong>: Embeds another web page or resource within the current document.</li>\r\n\t<li><strong>&lt;audio&gt;</strong>: Embeds audio content on the page.</li>\r\n\t<li><strong>&lt;video&gt;</strong>: Embeds video content on the page.</li>\r\n\t<li><strong>&lt;strong&gt;</strong>: Represents strong importance, typically displayed as bold text.</li>\r\n\t<li><strong>&lt;em&gt;</strong>: Represents emphasized text, typically displayed as italicized text.</li>\r\n\t<li><strong>&lt;br&gt;</strong>: Inserts a line break within text.</li>\r\n\t<li><strong>&lt;hr&gt;</strong>: Creates a thematic horizontal line.</li>\r\n\t<li><strong>&lt;meta&gt;</strong>: Provides additional metadata about the document.</li>\r\n</ol>\r\n\r\n<p>Please keep in mind, this is not a cumulative list of all HTML elements. HTML will continue evolving, like any language, but if you know these elements you&rsquo;ll have a solid working-foundation.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n	https://imgur.com/Up7GF5q.png	\N
5	Variable Declaration in JS	var, let and const (but not var though)	August 18, 2023	<p>When declaring a variable in Javascript, you are faced with a choice between 3 different forms of variable: <strong>var, const </strong>and <strong>let.</strong> It may seem like a minor decision, but it is one that can create some seriously frustrating behaviors in your code. There have been some changes in ES6 standards to mitigate this. However, if you are working with previous iterations of JS you may run into this confusing problem.</p>\r\n\r\n<p><strong>What&rsquo;s wrong with var?</strong></p>\r\n\r\n<p>So what is the problem? It is the use of <strong>var</strong> for declaration. var is classically used when you&#39;ll be reassigning or redeclaring your variable. The issues with <strong>var</strong>:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>The scope of <strong>var </strong>can change based on circumstances like redeclaration. If not explicitly redeclared, your variable will become global, invading the namespace.</li>\r\n\t<li>Variables with <strong>var </strong>are hoisted to the top of their scope, resulting in undefined variables. (Which is never useful)</li>\r\n</ul>\r\n\r\n<p>It is the modern ES6 standard, however, to never use <strong>var </strong>but to use <strong>let </strong>and <strong>const </strong>instead.&nbsp;</p>\r\n\r\n<p><strong>Which to use, let or const?</strong></p>\r\n\r\n<p>Deciding when to use <strong>let </strong>and <strong>const </strong>is a bit more simple. When you&rsquo;re trying to assign a function, object or array to a variable, it is best practice to use <strong>const</strong>. On the other hand, if you&rsquo;re needing to adjust the value throughout your code, you&rsquo;ll need to use <strong>let</strong>. The scope of these two will help maintain the modularity of your code making it more easily readable and more reliable.</p>\r\n\r\n<p>In essence, you can build a functional program without adhering to these suggestions perfectly, but if your aim is to write really good code, then you might want to take a moment to consider the functionality of your variable declaration. It is not fun to trace down a <strong>var </strong>related problem, so save yourself the headache.</p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n	https://imgur.com/Vx1etqA.png	\N
4	HTML	A "Get Started" Guide	August 12, 2023	<p>In the world of Web Development, you&rsquo;ll need to learn HTML first. To the uninitiated it may look complicated, but comparatively it is not a difficult language to understand. It is, in the sense of algorithmic complexity, not a language for programming. It is what&rsquo;s called a markup language: a text-encoding system consisting of a set of symbols inserted in a text document to control its structure, formatting, or the relationship between its parts (wiki).&nbsp;</p>\r\n\r\n<p>It is simple to run HTML. You don&rsquo;t even really need an IDE. You only need to copy and paste your HTML file path in the browser, just like a URL, and you&rsquo;ll have local access to your web page.&nbsp;&nbsp;</p>\r\n\r\n<p><strong>HTML-5 Boilerplate(with explainer comments):</strong></p>\r\n\r\n<p>Most, if not all, web-pages will have a standard HTML setup that looks something like this.</p>\r\n\r\n<p><img alt="A picture of html boilerplate" src="https://imgur.com/WLRiYAV.png" style="float:left; height:293px; width:300px" /></p>\r\n\r\n<p>For further research into HTML tags, check out my other article: <a href="https://bestfoot-blog.herokuapp.com/post/3">43 Most Common HTML Tags</a></p>\r\n\r\n<p><strong>Semantic Elements:</strong>&nbsp;</p>\r\n\r\n<p>When writing HTML, the syntax is as follows:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Close your elements with &ldquo;<strong>greater-than</strong>&rdquo; and &ldquo;<strong>l</strong><strong>ess-than</strong>&rdquo; symbols. Most elements will use a syntax that looks something like: <strong>&lt;h1&gt;Type Headline Here&lt;/h1&gt;</strong>. It is important that you close with a &ldquo;<strong>&lt;/&gt;</strong>&rdquo; statement, to tell the computer where the <strong>h1</strong> starts and ends.&nbsp;</li>\r\n\t<li>When applying attributes to your HTML elements the syntax is:<strong> &lt;img src=&quot;image-path.jpg&quot; alt=&quot;alternative text for image&quot;&gt;</strong>. You will call your attribute src (for example) and the value will be wrapped with <strong>quotation marks</strong>. You only put a <strong>space between your attrs</strong>; simpler than other languages that employ a lot of commas and/or semicolons.</li>\r\n</ul>\r\n\r\n<p>The feeling of writing your first HTML page and typing something in the input is exciting. It is the first event in your web-dev journey that will introduce you to the magic of front-end programming!</p>\r\n\r\n<p>&nbsp;</p>\r\n	https://imgur.com/2rWwVUA.png	\N
6	Database Management Systems (DBMS)	The paradigms and their usecases	August 20, 2023	<p>The tech world is, in its most simple explanation, composed of information. A computer is essentially a complex system for storing, organizing and manipulating data; from simple ones and zeros, through multiple layers of translation, into useful information. It is the data that assists us in making the informed decisions that make efficient large-scale organization possible. That being the case, it is of the utmost importance that we have effective ways of managing massive amounts of data through computing. In this blog we&#39;ll explore the various database management systems (DBMS).&nbsp;</p>\r\n\r\n<p>There are a lot of different approaches that have been implemented in the attempt to manage data:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Relational (SQL)</li>\r\n\t<li>NoSQL</li>\r\n\t<li>Columnar&nbsp;</li>\r\n\t<li>Time-Series</li>\r\n\t<li>NewSQL</li>\r\n\t<li>Document</li>\r\n\t<li>Key-value</li>\r\n\t<li>Graph</li>\r\n\t<li>Object Oriented</li>\r\n</ul>\r\n\r\n<p><strong>Relational </strong>DBMS are used to organize data in the form of a table; columns and rows. Each table is related to the next via a defined key. SQL databases are chosen for their structure and reliability. While they are not the most efficient, they do remove some tendency for errors via ACID compliance (atomicity, consistency, isolation and durability).</p>\r\n\r\n<p><strong>NoSQL </strong>is not necessarily a narrow category, but rather a paradigm aimed at reducing the performance bottle-necks for data-management using &ldquo;not only SQL,&rdquo; meaning that NoSQL encompasses the other types of DBMS listed here. The distinction is that these can use relational and non-relational approaches to create a more efficient system. NoSQL DBs are used to provide horizontal scalability: an attribute that distributes the workload for more adaptive processing.</p>\r\n\r\n<p><strong>Columnar </strong>databases are structured to organize data into columns; not rows. They are useful when the type of data you&rsquo;re going to analyze is not as multi-dimensional. You can analyze a single column more efficiently than a combination of rows and columns; like in a table.&nbsp;</p>\r\n\r\n<p><strong>Time-Series </strong>databases are used for organizing data based on time-correlation. If time is the metric your data is concerned with, then time-series might be the best choice. Some information is necessarily measured against time: stock-markets, temperature fluctuations and ecological boom-and-bust cycles for instance.</p>\r\n\r\n<p><strong>NewSQL </strong>is a paradigm that attempts to achieve the best of both worlds. It offers scalability and efficiency, while taking care to maintain the ACID data integrity standards. You might wonder, why would anybody use SQL if NewSQL exists? The choice is made by the simplicity and familiarity of standard SQL. SQL has been around for a while and with that history comes better documentation, as well as many older programs having a reliance on legacy SQL.&nbsp;</p>\r\n\r\n<p><strong>Document </strong>based data management is the type implemented in JSON (Javascript Object Notation). It is a great approach to managing semi-structured, non-joined data. The ability to generate a diversity of attributes quickly is the strength of document based DBMS. It is a go-to for APIs due to its agility and flexibility.&nbsp;</p>\r\n\r\n<p><strong>Key-Value </strong>systems are used for their speed, when the complexity of analysis is not important. Caching is a great example of a key-value inquiry. Whenever it is possible to extract the desired data based on its associated key, it is the most effective solution exhibiting a time-complexity of O(1); it takes the same amount of time regardless of the amount of space occupied.</p>\r\n\r\n<p><strong>Graph </strong>based databases are used when the nature of the data is highly-relational. In this sense, they are more relational than traditional SQL. At the heart of this system is the need for analyzing relationships between different types of information. Recommendation systems and AI models are heavily reliant on this form of data management. Again it is important to recognize that while these are considered NoSQL, it is not because they are non-relational but rather hyper-relational.&nbsp;</p>\r\n\r\n<p><strong>Object-Oriented </strong>DBMS are used when there is a hierarchical nature to the data. Objects inherit properties from their parent object. These types of data management are very useful in concurrency with OOP (Object Oriented Programming) designs, and are often used to model real-world characteristics of an object; every car is a car, but every car is not the same car.</p>\r\n\r\n<p>When managing your data there is a tension between simplicity and customization. Systems with more complexity are systems with higher entropy. It is absolutely critical that the correct choices are made when trying to squeeze the most efficiency out of a process. While having the safeguards of ACID standards will make your data management more reliable, it may make it less efficient. The decision should be made based on the specific needs of your application.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n	https://imgur.com/qjJIXH4.png	\N
7	Data Migrations 	An overview	August 21, 2023	<p>&ldquo;If you fail to plan, you plan to fail&rdquo; - Benjamin Franklin 1790</p>\r\n\r\n<p>Sometimes a situation will arise in which it is necessary to move or restructure the data that your business and its clients are so dependent on. When undertaking this task it is important to exercise safe practices to ensure that your valuable data maintains its integrity throughout the process. It can be a tricky endeavor, but with the use of some powerful tools and strategies you&rsquo;ll have nothing to fear. In this blog I&rsquo;ll go over the tools, methods and some common reasons to carry out a migration.&nbsp;</p>\r\n\r\n<p><strong>Why Migrate?</strong></p>\r\n\r\n<p>There are a lot of potential reasons to consider a database migration. Maybe you need to make some structural changes to the schema, update the hardware and/or software that hosts your data, move to a more secure or compact configuration, or you may even just need to move your data to a different physical location. Migration is not a first-resort, but it&rsquo;s a viable solution when necessary.&nbsp;</p>\r\n\r\n<p><strong>The Process: Extract, Transform, Load (ETL)</strong></p>\r\n\r\n<p>The process is implemented for moving and integrating data from one source to the next. Breaking the process up into phases ensures a comprehensive approach to data warehousing, and integration. It is common to use either scripting or pre-built tools to carry out this task.&nbsp;</p>\r\n\r\n<p>The <strong>extraction</strong> phase is characterized by taking an inventory of the locations and specific qualities of the data, and gathering it for further testing and analysis.&nbsp;</p>\r\n\r\n<p>The <strong>transformation </strong>phase is where your data will be reconditioned as necessary for the target system. A range of tasks could be carried out in this phase; reformatting, combining and cleaning. This is the most sensitive and volatile phase.</p>\r\n\r\n<p>The <strong>loading </strong>phase is where the transformed data is inserted into the target system. There are different approaches to loading the data; mostly concerned with which data and how large of a portion.&nbsp;</p>\r\n\r\n<p><strong>Risks and Safeguards</strong></p>\r\n\r\n<p>A lot can go wrong when transferring your data; corruption, loss and other inconsistencies. Without the proper safety protocols and strategies in place, your system could experience unforeseen disruption impacting user experience and even the security of the data. Some ways to navigate these hazards might include:&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Testing</li>\r\n\t<li>Communicating expectations</li>\r\n\t<li>Version control</li>\r\n</ul>\r\n\r\n<p><strong>Testing</strong></p>\r\n\r\n<p>There are many obvious issues that could arise, and some that won&rsquo;t become apparent without thorough analysis. For this reason it is best practice to carry out testing<strong> </strong>both before, during and after migration<strong>. </strong>There are many techniques and tools for testing the efficacy of a given approach. A few strong examples:&nbsp;</p>\r\n\r\n<p><strong>Unit testing</strong> breaks the test-cases into separate parts that can be assessed more simply. In large systems the interactions become untenable. When you implement strong unit testing you&rsquo;re able to assess the many small systems to ensure that your script will have the intended effect.&nbsp;</p>\r\n\r\n<p><strong>Data reconciliation </strong>uses database validation tools like Redgate SQL Compare, or the open-source OpenDBDiff to compare the database before and after, highlighting inconsistencies. These tools will allow you to adjust your scripts accordingly. Especially in cases where your data is not changing, just migrating, these tools are invaluable.&nbsp;</p>\r\n\r\n<p><strong>Rollback testing </strong>is used to ensure that your data can be returned in the case of a fatal error. With a solid rollback strategy in place, your concerns can shift from worrying about losing or corrupting the data to managing downtime and transformations.&nbsp;</p>\r\n\r\n<p>There are a number of different GUI tools and services with varying degrees of financial commitment. Other options include Python libraries like PySpark, pandas/Dask and Bonobo (not an inclusive list, but some suggestions).&nbsp;</p>\r\n\r\n<p><strong>Communication</strong></p>\r\n\r\n<p>We love to focus on technical aspects of a project like languages, stacks, heaps, algorithms and architectures; but when it comes to effective communication it&rsquo;s easy to overlook. Communication is a fatal aspect to ignore at any scale. Even commenting on your own code is a form of communication that pays to implement. When taking on a project like a data migration you&rsquo;ll be working with stakeholders to whom non-communication is a red flag. There are some good communication guidelines to follow for these situations.</p>\r\n\r\n<ul>\r\n\t<li><strong>Meetings</strong>: The opportunity for your stakeholders to lay out their concerns, and for you to address them. Use meetings sparingly, but make effective use of them. Collaboration and defining the scope of a project relies heavily on effective communication at this stage.</li>\r\n\t<li><strong>Updates: </strong>At every stage of the process, communicate the progress and the setbacks. Share plans for moving forward and estimated time-lines to set clear expectations and ease the anxiety of your stakeholders.</li>\r\n\t<li><strong>Documentation: </strong>Each step along the way should be documented for the sake of transparency. Trust is earned in these scenarios and when questions arise thorough documentation can help you get on the same page as your stakeholders.&nbsp;</li>\r\n\t<li><strong>Celebrate: </strong>A win is a big deal, and each milestone should be made exciting. It&rsquo;s not all about work but good work is something that should be recognized, appreciated and celebrated.&nbsp;</li>\r\n</ul>\r\n\r\n<p>These are some good practices, not only for data migrations, but for any time when you&rsquo;re collaborating. It is maintaining trust and expectations that take your interactions to the next level. Especially if you&rsquo;re offering a service, this can make the difference between a returning client and one that will not only not return, but advise others against working with you.</p>\r\n\r\n<p><strong>Version Control</strong></p>\r\n\r\n<p>With good version control, you effectively have an undo button allowing you to rollback and trace any changes that have been made to your data. It is not only advantageous but also necessary to implement some form of versioning for any software project, data management is no exception.&nbsp;</p>\r\n\r\n<p><strong>Git </strong>is probably the most popular tool for version control, but it is a complex and powerful tool that may introduce too steep of a learning-curve for the needs of some projects. As an aside, if you&rsquo;re unfamiliar with version control you should familiarize yourself with Git. In software, web-development, data-management, or basically any other portion of the tech field, Git is a tool that will give your team and even your personal projects superpowers.&nbsp;</p>\r\n\r\n<p>When Git is unnecessary there are other popular options including: <strong>Subversion (SVN)</strong>, prized for its simplicity and centralized architecture, and <strong>Mercurial </strong>which is a distributed architecture like Git but is geared more toward smaller code-bases and is highly efficient.</p>\r\n\r\n<p>Essentially, good outcomes depend on good plans. The subjects covered here should help you get a baseline understanding of the processes implemented in data migration.</p>\r\n	https://imgur.com/0LSSPA8.png	\N
\.


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: areibogihitbae
--

COPY "public"."comments" ("id", "body", "name", "date", "blog_post_id") FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: areibogihitbae
--

COPY "public"."users" ("id", "name", "password", "email") FROM stdin;
1	Chris	pbkdf2:sha256:260000$sN3zBwfG$615293f84502d190f163c3484d5d5d0f1a672b15a45dd803a6c458c02d452dd5	chrismoultonwork@gmail.com
\.


--
-- Name: blog_posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: areibogihitbae
--

SELECT pg_catalog.setval('"public"."blog_posts_id_seq"', 7, true);


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: areibogihitbae
--

SELECT pg_catalog.setval('"public"."comments_id_seq"', 1, false);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: areibogihitbae
--

SELECT pg_catalog.setval('"public"."users_id_seq"', 1, true);


--
-- PostgreSQL database dump complete
--

